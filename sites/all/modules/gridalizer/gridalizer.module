<?php

/**
 * Implements hook_perm().
 */
function gridalizer_filter_perm() {
  $perm['administer gridalizer'] = array(
    'title' => t('Administer gridalizer.'),
  );
  return array_keys($perm);
}

/**
 * Implementation hook_menu().
 *
 */
function gridalizer_menu() {
  $items = array();

  $items['admin/build/context/gridalizer'] = array(
    'title' => 'Gridalizer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gridalizer_settings_admin_form'),
    'description' => 'Gridalizer configuration to handle grid360 classes.',
    'access arguments' => array('administer gridalizer'),
    'file' => 'gridalizer.admin.inc',
    'file path' => drupal_get_path('module', 'gridalizer') . '/includes',
  );
  
  $items['admin/build/context/gridalizer/settings'] = array(
    'title' => 'General settings',
    'description' => t('Select block types.'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/build/context/gridalizer/regions'] = array(
    'title' => 'Regions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gridalizer_regions_admin_form'),
    'description' => 'Select regions.',
    'access arguments' => array('administer gridalizer'),
    'file' => 'gridalizer.admin.inc',
    'file path' => drupal_get_path('module', 'gridalizer') . '/includes',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items['admin/build/context/gridalizer/classes'] = array(
    'title' => 'Grid classes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gridalizer_classes_admin_form'),
    'description' => 'Select block types.',
    'access arguments' => array('administer gridalizer'),
    'file' => 'gridalizer.admin.inc',
    'file path' => drupal_get_path('module', 'gridalizer') . '/includes',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );

  return $items;
}

function gridalizer_preprocess(&$vars, $hook) {
  if ($hook == 'block') {
    // Check that the theme is the selected on
    global $theme_key;
    if ($theme_key != variable_get('gridalizer_theme', '')) {
      return;
    }
    
    // Load regions selected, only blocks in these sould be modifyed
    $regions = variable_get('gridalizer_regions', array());
    if (!isset($regions)) {
      drupal_set_message(t('You have not yet configured "Gridalizer" regions. Click <a href="@link">here</a> to configure it.',
            array('@link' => url('admin/build/context/gridalizer/regions'))));
      return;
    }
    $active_regions = array_filter($regions['active']);
    $side_regions = array_filter($regions['side']);
    $no_side_regions = array_filter($regions['nosides']);

    // Load selected block types
    $providers = variable_get('gridalizer_blocks', NULL);
    if (!isset($providers)) {
      drupal_set_message(t('You have not yet configured "Gridalizer" block types. Click <a href="@link">here</a> to configure it.',
            array('@link' => url('admin/build/context/gridalizer'))));
      return;
    }
    $providers = array_filter($providers);

    // Get current block
    $current_block = $vars['block'];

    // Verify that the block type is one off the selected types
    if (!in_array($current_block->module, $providers)) {
      // Not a selected block type
      return;
    }
    
    // Init class var
    $class = NULL;

    // Check if block is in no-side regions.
    if (in_array($current_block->region, $no_side_regions)) {
      // Get blocks.
      $blocks = gridalizer_get_region_blocks();

      // Get number of blocks in region.
      $num_of_blocks = gridalizer_count_blocks($blocks[$current_block->region], $providers);

      // Find the right class
      $class = gridalizer_get_classes($num_of_blocks, 'empty');
    }

    // Verify that block is in a selected region.
    if (in_array($current_block->region, $active_regions)) {
      // Get blocks
      $blocks = gridalizer_get_region_blocks();

      // Get number of blocks in region.
      $num_of_blocks = gridalizer_count_blocks($blocks[$current_block->region], $providers);

      // Create index key based in side regions content
      $key = '';
      foreach ($side_regions as $side) {
        if ($blocks[$side]) {
          $key .= $side.'_';
        }
      }
      $key = substr($key, 0, -1);

      // All side regions are empty
      if (!$key) {
        $key = 'empty';
      }

      // Find the right class
      $class = gridalizer_get_classes($num_of_blocks, $key);
    }
    
    // Add grid to the block
    if ($class) {
      $vars['block']->grid = $class;
    }
  }
}

/**
 * Findes the right class base on the numbers of blocks and a key into the
 * user supplied configuration.
 *
 * @param int $num_of_blocks
 * @param string $key
 * @return string $class
 */
function gridalizer_get_classes($num_of_blocks, $key) {
  $combinations = variable_get('gridalizer_combinations', NULL);
  if (empty($combinations[$key][$num_of_blocks]) || $num_of_blocks > variable_get('gridalizer_max_blocks', 4)) {
    // Default value
    $class = $combinations[$key][0];
  }
  else {
    $class = $combinations[$key][$num_of_blocks];
  }

  return $class;
}

/**
 * Finds blocks inserted into regions, both via context and normal drupal block
 * page.
 *
 * @staticvar array $blocks
 * @param boolean $reset
 * @return array $blocks
 */
function gridalizer_get_region_blocks($reset = FALSE) {
  static $blocks;
  if (!isset($blocks) || $reset) {
    // Get all types of inserted blocks
    $region_blocks = _gridalizer_region_blocks();
    $context_blocks = _gridalizer_context_region_blocks();

    // Merge the block lists
    foreach ($context_blocks as $key => $value) {
      if (empty($region_blocks[$key])) {
        $region_blocks[$key] = $value;
      }
      else {
        $region_blocks[$key] = array_merge($region_blocks[$key], $value);
      }
    }

    // Save result to static variable
    $blocks = $region_blocks;
  }

  return $blocks;
}


/**
 * Helper function that count the number of blocks in a region, but only the
 * blocks that should be modified.
 *
 * @param <type> $region_blocks
 * @param <type> $providers
 * @return int
 */
function gridalizer_count_blocks($region_blocks, $providers) {
  $count = 0;
  foreach ($region_blocks as $block) {
    if (in_array($block['module'], $providers)) {
      $count++;
    }
  }
  return $count;
}

/**
 * Helper function that creates an array of blocks for each region in the
 * current theme.
 *
 * @global object $theme_info
 * @staticvar array $block_list
 * @return array $block_list
 */
function _gridalizer_region_blocks($reset = FALSE) {
  global $theme_info;
  static $block_list;

  if (!isset($block_list) || $reset) {
    $block_list = array();
    foreach ($theme_info->info['regions'] as $region => $value) {
      // Create empty array foreach region.
      if (!isset($block_list[$region])) {
        $block_list[$region] = array();
      }

      // Get blocks for current region.
      $blocks = block_list($region);
      foreach ($blocks as $block) {
        $block_list[$region][] = array('module' => $block->module, 'bid' => $block->bid);
      }
    }
  }

  return $block_list;
}

/**
 * Helper function that findes all blocks inserted by the context module into
 * a given region from the current theme.
 *
 * @staticvar array $region_blocks
 * @return array $region_blocks
 */
function _gridalizer_context_region_blocks($reset = FALSE) {
  static $region_blocks;

  if (!isset($region_blocks) || $reset) {
    $region_blocks = array();

    // Get all active contexts.
    $contexts = context_active_contexts();
    foreach ($contexts as $context) {
      // Get all blocks in this context.
      if (isset($context->reactions['block']['blocks'])) {
        foreach ($context->reactions['block']['blocks'] as $block) {
          if (!isset($region_blocks[$block['region']])) {
            $region_blocks[$block['region']] = array();
          }
          $region_blocks[$block['region']][] = array('module' => $block['module'], 'bid' => $block['delta']);
        }
      }
    }
  }

  return $region_blocks;
}